---
name: "(chunk) Build C++ project"

on:
  workflow_call:
    inputs:
      docker_image:
        type: string
        required: false
        default: conanio/gcc11-ubuntu16.04:1.47.0
      library_name:
        type: string
        required: true
        description: "Name of the library. It should match name of the repository"
      library_version:
        type: string
        required: true
        description: "Version of the library."
      github_sha:
        type: string
        required: true
      remote_project:
        type: string
        required: false
        default: ""
      profile:
        type: string
        required: true
        description: "Profile to use in this run"
      run_tests:
        type: string
        required: false
        default: ctest --output-on-failure
      conanfile:
        type: string
        required: false
        default: conanfile.txt
        description: "Name of the conanfile, typically it will be `conanfile.txt` or `conanfile.py`"
    secrets:
      RT_TOKEN:
        required: false
      RT_USERNAME:
        required: false

env:
  CONAN_USER_HOME: /home/conan

defaults:
  run:
    working-directory: /home/conan/library

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.docker_image }}
    env:
      CONAN_USER_HOME: /home/conan
      CONAN_SYSREQUIRES_MODE: enabled
      CONAN_PRINT_RUN_COMMANDS: 1
    steps:

      - name: Install jq
        working-directory: /home/conan
        run: |
          sudo apt-get update
          sudo apt-get install jq -y

      - name: Check out repository code
        uses: rodrigorodriguescosta/checkout@1d64c0a4a695ff5edb95596c11b430050668c83f  # FIXME: Not using actions/checkout just because of 'https://github.com/actions/checkout/pull/388'
        with:
          path: /home/conan/library

      - name: Cache Conan packages
        uses: actions/cache@v2
        with:
          key: conan-cache-${{ inputs.library_name }}
          path: /home/conan/.conan

      - name: Configure Conan
        run: |
          conan config init --force
          conan config set general.revisions_enabled=1
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan config install https://github.com/conan-io/conanclientcert.git
          conan --version
          conan config home

      - name: Connect to remote (project)
        if: ${{ inputs.remote_project }}
        run: |
          conan remote add -i 0 remote-project ${{ inputs.remote_project }}
          conan user -r remote-project -p ${{secrets.RT_TOKEN}} ${{secrets.RT_USERNAME}}

      - name: Prepare deps
        run: |
          cp -r .conan/* /home/conan/.conan/
          conan profile list

      - name: Compute lockfile for current configuration
        run: |
          mkdir build && cd build
          conan lock create --profile:host=${{ inputs.profile }} --profile:build=default --lockfile=../lockfile.json --lockfile-out=lockfile.json --name=${{ inputs.library_name }} --version=${{ inputs.library_version }} ../${{ inputs.conanfile }} --build --update

      - name: Archive lockfile
        uses: actions/upload-artifact@v2
        with: 
          name: lockfile.json
          path: lockfile.json

      - name: Build the build-requires
        # This is needed because of https://github.com/conan-io/conan/issues/10345, but
        # if we use stable docker image (current epoch), all BR should be available in ConanCenter
        run: |
          jq '.graph_lock.nodes[] | select( .context=="build") | .ref' build/lockfile.json | while read -r reference ; do
              ref=$(echo $reference | sed 's/#/@#/g')
              ref_unquoted=$(echo $ref | sed 's/\"//g')
              conan install $ref_unquoted --build=missing --profile:host=default --profile:build=default
          done

      - name: Build dependencies
        run: |
          cd build
          conan info --lockfile=lockfile.json ../${{ inputs.conanfile }} --json=project.json
          conan install --lockfile=lockfile.json ../${{ inputs.conanfile }} --build=missing --update
          conan remove "*" --builds --force
          conan remove "*" --src --force

      - name: List and upload packages that have being built
        if: ${{ inputs.remote_project }}
        run: |
          cd build
          jq '.[] | select( .context=="host") | select( .binary=="Missing") | .reference' project.json | while read -r reference ; do
            ref_unquoted=$(echo $reference | sed 's/\"//g')
            ref_usable=$(echo $ref_unquoted | sed '/@/!s/.*/&@/g')
            conan upload --confirm --parallel --all --remote remote-project $ref_usable
          done

      - name: Build the project
        run: |
          cd build
          cmake .. -DCMAKE_MODULE_PATH=$(pwd) -DCMAKE_PREFIX_PATH=$(pwd) -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=$(conan profile get settings.build_type ${{ inputs.profile }}) -DCMAKE_INSTALL_PREFIX:PATH=$(pwd)/install
          make

      - name: Run tests
        if: ${{ inputs.run_tests }}
        run: |
          cd build
          ${{ inputs.run_tests }}
